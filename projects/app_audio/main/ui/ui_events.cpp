// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.4.1
// LVGL version: 8.3.11
// Project name: SquareLine_Project

#include "ui.h"
#include "maix_basic.hpp"
#include "lvgl/lvgl.h"
#include "maix_audio.hpp"
#include "main.hpp"
#include "stdio.h"
#include "stdlib.h"
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <atomic>

using namespace maix;


extern std::atomic<bool> exit_record;
extern std::atomic<bool> flag_pause_record;;
extern pthread_t record_thread;
extern pthread_t play_thread;
extern audio::Recorder r;
extern audio::Player   p ;

extern int list_number_name;
extern void event_handler_list(lv_event_t* e);
extern void *thread_record_func(void *arg);
// extern void play_wav_thread();
extern lv_obj_t* m_list_audio_list;
extern lv_obj_t* btn_list;
bool flag_record=false;
bool flag_play=false;

bool play_audio_slider_flag=false;
bool record_audio_slider_flag=false;


lv_timer_t *timer_record;
uint32_t elapsed_record_time;
bool is_paused = false;
//play
lv_timer_t *timer_play;
extern std::atomic<bool> is_paused_play;
extern std::atomic<bool> is_play;


bool test_my=false;
// extern bool is_play;
// extern bool is_paused_play;
uint32_t elapsed_time_play;


extern pthread_mutex_t test_flag;
// 定义条件变量
extern pthread_cond_t condition;

void timer_record_cb(lv_timer_t *timer)
{
    if (!flag_pause_record) 
    {
        elapsed_record_time++;

        // 计算分钟和秒数
        uint32_t minutes = elapsed_record_time / 60;
        uint32_t seconds = elapsed_record_time % 60;

        // 更新标签显示
        char buf[16];
        snprintf(buf, sizeof(buf), "%02d:%02d", minutes, seconds);
        lv_label_set_text(ui_Label7, buf);
    }

}
void timer_play_cb(lv_timer_t *timer)
{
    if (!is_paused_play) {
        elapsed_time_play++;

        // 计算分钟和秒数
        uint32_t minutes = elapsed_time_play / 60;
        uint32_t seconds = elapsed_time_play % 60;

        // 更新标签显示
        char buf[16];
        snprintf(buf, sizeof(buf), "%02d:%02d", minutes, seconds);
        lv_slider_set_value(ui_Slider1,elapsed_time_play, LV_ANIM_OFF);
        lv_label_set_text(ui_Label9, buf);
    }

}
// 启动录音和计时
void start_recording(void) {
    elapsed_record_time = 0;
    flag_pause_record = false;
    // 启动定时器，每秒回调一次
    timer_record = lv_timer_create(timer_record_cb, 1000, NULL);

    // 显示初始时间
    lv_label_set_text(ui_Label7, "00:00");
}
void start_playing(void) 
{
    elapsed_time_play = 0;
    is_paused_play = false;
    // 启动定时器，每秒回调一次
    timer_play = lv_timer_create(timer_play_cb, 1000, NULL);

    // 显示初始时间
    lv_label_set_text(ui_Label9, "00:00");
}
void stop_recording(void) {
    if (timer_record) {
        lv_timer_del(timer_record);
        timer_record = NULL;
    }
}
void stop_playing(void) 
{
    if (timer_play) {
        lv_timer_del(timer_play);
        timer_play = NULL;
    }
}


void app_exit_imgbtn(lv_event_t * e)
{
    maix::app::set_exit_flag(true);
}
void exitfuction(lv_event_t * e)
{
	// Your code here
    // LV_LOG_USER("Clicked date: %d", 2);
    maix::app::set_exit_flag(true);
}

void recordclicked(lv_event_t * e)
{
	// Your code here
    // flag_record=true;
	// start_recording();
    

}

void stoprecordfunction(lv_event_t * e)
{
	// Your code here
    // exit_record=false;
}

void pausefunction(lv_event_t * e)
{
	// Your code here
	is_paused=!is_paused;
    
}

void playaudiocallback(lv_event_t * e)
{
	// Your code here
    // flag_play=true;
    // pthread_create(&record_thread, NULL, thread_record_func, NULL);
    // pthread_detach(record_thread); // 分离线程
}

void playaudioexit(lv_event_t * e)
{
	// Your code here
}

void playvolumeclick(lv_event_t * e)
{
	// Your code here
    play_audio_slider_flag=!play_audio_slider_flag;
    if (play_audio_slider_flag)
    {
        lv_obj_clear_flag(ui_Slider2, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_Label11, LV_OBJ_FLAG_HIDDEN);
    }
    else
    {
        lv_obj_add_flag(ui_Slider2, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_Label11, LV_OBJ_FLAG_HIDDEN);
    }
}

void recordvolumeclick(lv_event_t * e)
{
	// Your code here
    record_audio_slider_flag=!record_audio_slider_flag;
    if (record_audio_slider_flag)
    {
        lv_obj_clear_flag(ui_Slider_record, LV_OBJ_FLAG_HIDDEN);
        lv_obj_clear_flag(ui_Label_record_volume, LV_OBJ_FLAG_HIDDEN);
    }
    else
    {
        lv_obj_add_flag(ui_Slider_record, LV_OBJ_FLAG_HIDDEN);
        lv_obj_add_flag(ui_Label_record_volume, LV_OBJ_FLAG_HIDDEN);
    }
}

void record_showvolumeslider(lv_event_t * e)
{
    // Your code here
    lv_obj_t * slider = lv_event_get_target_obj(e);
    // 获取滑块的当前值
    int32_t value = lv_slider_get_value(slider);

    // 更新label的文本为滑块的当前值
    static char buf[8]; // 用于存储字符串
    lv_snprintf(buf, sizeof(buf), "%d", value);
    lv_label_set_text(ui_Label_record_volume, buf);

}
void recordvolumeslider(lv_event_t * e)
{
	// Your code here
    lv_obj_t * slider = lv_event_get_target_obj(e);
    // 获取滑块的当前值
    int32_t value = lv_slider_get_value(slider);
    r.volume(value);



    // 更新label的文本为滑块的当前值
//    static char buf[8]; // 用于存储字符串
//    lv_snprintf(buf, sizeof(buf), "%d", value);
//    lv_label_set_text(ui_Label11, buf);
    // LV_LOG_USER("sliderwwww:%d", value);
}

void playclickedscreen3(lv_event_t * e)
{
    if(is_play)
    {
        is_paused_play=!is_paused_play;
    }
    else
    {
        pthread_create(&play_thread, NULL, thread_play_func, NULL);
        pthread_detach(play_thread);
    }

}

void playscreen3exit(lv_event_t * e)
{
	// Your code here
    // is_paused_play=false;
    is_play=false;
    // stop_playing();
    lv_imagebutton_set_state(ui_Image4, LV_IMAGEBUTTON_STATE_RELEASED);
}

void playvolumeslider(lv_event_t * e)
{
	// Your code here
    lv_obj_t * slider = lv_event_get_target_obj(e);
    // 获取滑块的当前值
    int32_t value = lv_slider_get_value(slider);
    p.volume((32-value));
}

void showvolumeslider(lv_event_t * e)
{
    // Your code here
    lv_obj_t * slider = lv_event_get_target_obj(e);
    // 获取滑块的当前值
    int32_t value = lv_slider_get_value(slider);

    // 更新label的文本为滑块的当前值
    static char buf[8]; // 用于存储字符串
    lv_snprintf(buf, sizeof(buf), "%d", value);
    lv_label_set_text(ui_Label11, buf);

    // LV_LOG_USER("current:%d", value);

}

void imgbtnstoprecordfunction(lv_event_t * e)
{
	// Your code here
	exit_record=false;
	stop_recording();
    // is_paused = true;
    lv_imagebutton_set_state(ui_Image3, LV_IMAGEBUTTON_STATE_RELEASED);
}

void imgbtnpausefunction(lv_event_t * e)
{
	// Your code here
    flag_pause_record=!flag_pause_record;
}

void imgbtnrecordfunction(lv_event_t * e)
{
	// Your code here
    // flag_record=true;
	start_recording();
    pthread_create(&record_thread, NULL, thread_record_func, NULL);
    pthread_detach(record_thread); // 分离线程
}

